<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">




    <context:annotation-config />
    <!-- 配置 service -->
    <context:component-scan base-package="com.jnshu.service" />


    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true" />

    <!-- 数据源，使用dbcp -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 连接池的最大数据库连接数，设为0表示无限制 -->
        <property name="maxActive" value="10"/>
        <!-- 最大空闲书，数据库连接的最大空闲时间。超过空闲时间，数据库连接将标记不可用，然后被释放，设为0表示无限制-->
        <property name="maxIdle" value="5"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.jnshu.mapper"/>
    </bean>

    <!-- 阿里云短信 -->
    <context:property-placeholder location="classpath:SMS.properties" ignore-unresolvable="true"/>
    <bean id="smsUtil" class="com.jnshu.util.SMSUtil">
        <constructor-arg name="accessKeyId" value="${sms.accessKeyId}"/>
        <constructor-arg name="accessKeySecret" value="${sms.accessKeySecret}"/>
        <constructor-arg name="SignName" value="${sms.SignName}"/>
        <constructor-arg name="TemplateCode" value="${sms.TemplateCode}"/>
    </bean>
    <!--七牛云对象存储配置-->
    <bean class="com.jnshu.util.QiniuOSSAPI">
        <property name="accessKeyId" value="9kcwkcYj4zRtoXRnzAE4UUu1lXiU8V_c4gUuCiBE"/>
        <property name="accessKeySecret" value="6PagIBO-xFcZAurdMiL8H3yeIXUHgry7WValVJD3"/>
        <property name="bucketName" value="lixiaobaivv"/>
    </bean>
    <!-- 阿里云邮箱 -->
    <bean id="sendMailSDK" class="com.jnshu.util.SendMailSDK"/>
    <!-- 阿里云oss-->
    <bean id="aliyunOSSAPI" class="com.jnshu.util.AliyunOSSAPI"/>


    <bean id="rmiClientSetting" abstract="true">
        <!-- 是否启动时加载stub -->
        <property name="refreshEndpointsOnStartup" value="false" />
        <!-- 调用异常时，将重新加载stub -->
        <property name="refreshEndpointsOnConnectFailure" value="true" />
        <!-- 调用失败时是否切换到其他服务端 -->
        <property name="switchEndpointOnFailure" value="true" />
        <!-- 追踪拦截器启用 -->
        <property name="registerTraceInterceptor" value="true" />
        <!-- 缓存stub 继承AbstractRmiShortFormProxyFactoryBean才有-->
        <property name="cacheEndpoints" value="true" />
    </bean>

    <!-- Dao层 -->
    <bean id="rmiServer"
          class="org.softamis.cluster4spring.rmi.RmiUrlListProxyFactoryBean" parent="rmiClientSetting">
        <!-- 远程服务对象接口类 -->
        <property name="serviceInterface" value="com.jnshu.service.StudentService"/>
        <!-- 远程对象地址list ，如果第一个无法使用，会抛异常，然后使用第二个去调用远程对象方法返回结果-->
        <property name="serviceURLs">
            <list>
                <value>rmi://localhost:9998/helloRMI</value>
                <value>rmi://localhost:9999/helloRMI</value>
            </list>
        </property>
        <!-- 调用时选择那个url的策略 -->
        <property name="endpointSelectionPolicy">
            <bean class="org.softamis.cluster4spring.support.invocation.ShuffleEndpointSelectionPolicy"/>
        </property>
    </bean>



    <!-- 职业表接口 -->
    <bean id="professionService"
          class="org.softamis.cluster4spring.rmi.RmiUrlListProxyFactoryBean" parent="rmiClientSetting">
        <!-- 远程服务对象接口类 -->
        <property name="serviceInterface" value="com.jnshu.service.ProfessionService"/>
        <!-- 远程对象地址list ，如果第一个无法使用，会抛异常，然后使用第二个去调用远程对象方法返回结果-->
        <property name="serviceURLs">
            <list>
                <value>rmi://127.0.0.1:9998/ProfessionService</value>
                <value>rmi://127.0.0.1:9999/ProfessionService</value>
            </list>
        </property>
        <!-- 调用时选择那个url的策略 -->
        <property name="endpointSelectionPolicy">
            <bean class="org.softamis.cluster4spring.support.invocation.ShuffleEndpointSelectionPolicy"/>
        </property>
    </bean>

    <!-- 用户接口 -->
    <bean id="userService"
          class="org.softamis.cluster4spring.rmi.RmiUrlListProxyFactoryBean" parent="rmiClientSetting">
        <!-- 远程服务对象接口类 -->
        <property name="serviceInterface" value="com.jnshu.service.UserService"/>
        <!-- 远程对象地址list ，如果第一个无法使用，会抛异常，然后使用第二个去调用远程对象方法返回结果-->
        <property name="serviceURLs">
            <list>
                <value>rmi://127.0.0.1:9998/UserService</value>
                <value>rmi://127.0.0.1:9999/UserService</value>
            </list>
        </property>
        <!-- 调用时选择那个url的策略 -->
        <property name="endpointSelectionPolicy">
            <bean class="org.softamis.cluster4spring.support.invocation.ShuffleEndpointSelectionPolicy"/>
        </property>
    </bean>

    <!-- 不明接口 -->
    <bean id="userQvService"
          class="org.softamis.cluster4spring.rmi.RmiUrlListProxyFactoryBean" parent="rmiClientSetting">
        <!-- 远程服务对象接口类 -->
        <property name="serviceInterface" value="com.jnshu.service.UserQvService"/>
        <!-- 远程对象地址list ，如果第一个无法使用，会抛异常，然后使用第二个去调用远程对象方法返回结果-->
        <property name="serviceURLs">
            <list>
                <value>rmi://127.0.0.1:9998/UserQvService</value>
                <value>rmi://127.0.0.1:9999/UserQvService</value>
            </list>
        </property>
        <!-- 调用时选择那个url的策略 -->
        <property name="endpointSelectionPolicy">
            <bean class="org.softamis.cluster4spring.support.invocation.ShuffleEndpointSelectionPolicy"/>
        </property>
    </bean>

    <!-- 阿里云oss接口 -->
    <bean id="serviceOSS"
          class="org.softamis.cluster4spring.rmi.RmiUrlListProxyFactoryBean" parent="rmiClientSetting">
        <!-- 远程服务对象接口类 -->
        <property name="serviceInterface" value="com.jnshu.service.ServiceOSS"/>
        <!-- 远程对象地址list ，如果第一个无法使用，会抛异常，然后使用第二个去调用远程对象方法返回结果-->
        <property name="serviceURLs">
            <list>
                <value>rmi://127.0.0.1:9998/ServiceOSS</value>
                <value>rmi://127.0.0.1:9999/ServiceOSS</value>
            </list>
        </property>
        <!-- 调用时选择那个url的策略 -->
        <property name="endpointSelectionPolicy">
            <bean class="org.softamis.cluster4spring.support.invocation.ShuffleEndpointSelectionPolicy"/>
        </property>
    </bean>

    <!-- 短信接口 -->
    <bean id="serviceSMS"
          class="org.softamis.cluster4spring.rmi.RmiUrlListProxyFactoryBean" parent="rmiClientSetting">
        <!-- 远程服务对象接口类 -->
        <property name="serviceInterface" value="com.jnshu.service.ServiceSMS"/>
        <!-- 远程对象地址list ，如果第一个无法使用，会抛异常，然后使用第二个去调用远程对象方法返回结果-->
        <property name="serviceURLs">
            <list>
                <value>rmi://127.0.0.1:9998/ServiceSMS</value>
                <value>rmi://127.0.0.1:9999/ServiceSMS</value>
            </list>
        </property>
        <!-- 调用时选择那个url的策略 -->
        <property name="endpointSelectionPolicy">
            <bean class="org.softamis.cluster4spring.support.invocation.ShuffleEndpointSelectionPolicy"/>
        </property>
    </bean>

    <!-- 邮箱接口 -->
    <bean id="emailService"
          class="org.softamis.cluster4spring.rmi.RmiUrlListProxyFactoryBean" parent="rmiClientSetting">
        <!-- 远程服务对象接口类 -->
        <property name="serviceInterface" value="com.jnshu.service.EmailService"/>
        <!-- 远程对象地址list ，如果第一个无法使用，会抛异常，然后使用第二个去调用远程对象方法返回结果-->
        <property name="serviceURLs">
            <list>
                <value>rmi://127.0.0.1:9998/EmailService"</value>
                <value>rmi://127.0.0.1:9999/EmailService"</value>
            </list>
        </property>
        <!-- 调用时选择那个url的策略 -->
        <property name="endpointSelectionPolicy">
            <bean class="org.softamis.cluster4spring.support.invocation.ShuffleEndpointSelectionPolicy"/>
        </property>
    </bean>



</beans>